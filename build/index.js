"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var fs=require("fs"),os=require("os"),path=require("path"),getPathData=_interopDefault(require("vamtiger-get-path-data")),createFolder=_interopDefault(require("vamtiger-create-directory-recursive")),copyFile=_interopDefault(require("vamtiger-copy-file")),getFolderContent=_interopDefault(require("vamtiger-get-directory-content-recursive"));function __awaiter(e,r,t,o){return new(t||(t=Promise))(function(i,a){function n(e){try{d(o.next(e))}catch(e){a(e)}}function l(e){try{d(o.throw(e))}catch(e){a(e)}}function d(e){e.done?i(e.value):new t(function(r){r(e.value)}).then(n,l)}d((o=o.apply(e,r)).next())})}const remove=require("trash");function removePaths({paths:e}){return __awaiter(this,void 0,void 0,function*(){return e&&(yield remove(e))})}var getTempFolder=({path:e})=>new Promise((r,t)=>{const o=path.resolve(os.tmpdir(),e);fs.mkdtemp(o,(e,o)=>e?t(e):r(o))});function getPathsToExclude({paths:e,regex:r}){const t=new Set;let o;return e.forEach(e=>{(o=!t.has(e)&&r.some(r=>!!e.match(r)))&&t.add(e)}),Array.from(t)}function archivePath({path:e,archiveFolder:r,folderPath:t}){return __awaiter(this,void 0,void 0,function*(){const o=(yield getPathData(e)).isFile()&&e,i=o&&o.replace(t,r),a=i&&path.dirname(i)||e.replace(t,r);a&&(yield createFolder({path:a})),o&&i&&(yield copyFile({source:o,destination:i}))})}function archivePaths({paths:e,archiveFolder:r,folderPath:t}){return e.reduce((e,o)=>e.then(()=>archivePath({path:o,folderPath:t,archiveFolder:r})),Promise.resolve())}function unarchive({archiveFolder:e,unarchivedFolder:r}){return __awaiter(this,void 0,void 0,function*(){const{file:t=[],directory:o=[]}=yield getFolderContent({path:e,classified:!0}),i=o.map(t=>t.replace(e,r)),a=t.map(t=>({source:t,destination:t.replace(e,r)}));yield i.length&&i.reduce((e,r)=>e.then(()=>createFolder({path:r})),Promise.resolve())||createFolder({path:r}),yield Promise.all(a.map(copyFile))})}var removeFile=({path:e})=>new Promise((r,t)=>fs.unlink(e,e=>e?t(e):r())),removeFolder=({path:e})=>new Promise((r,t)=>fs.rmdir(e,e=>e?t(e):r()));function permanentRemove({path:e}){return __awaiter(this,void 0,void 0,function*(){const r=yield getPathData(e),{file:t=[],directory:o=[]}=yield getFolderContent({path:e,classified:!0}),i=new Set(r.isFile()?t.concat([e]):t),a=new Set(o.reverse().concat([e]));yield Promise.all(Array.from(i).map(e=>removeFile({path:e}))),yield Array.from(a).reduce((e,r)=>e.then(()=>removeFolder({path:r})),Promise.resolve())})}function removeFolder$1({path:e,exclude:r,excludePattern:t=""}){return __awaiter(this,void 0,void 0,function*(){const o=(r&&"string"==typeof r&&[r]||r||[]).map(r=>`^${path.resolve(e,r)}$`).concat([t]).filter(e=>e).map(e=>new RegExp(e)),i=yield getTempFolder({path:path.basename(e)});yield archivePaths({paths:getPathsToExclude({paths:yield getFolderContent({path:e}),regex:o}),folderPath:e,archiveFolder:i}),yield removePaths({paths:[e]}),yield unarchive({archiveFolder:i,unarchivedFolder:e}),yield permanentRemove({path:i})})}function remove$1({file:e,files:r,folder:t,exclude:o,excludePattern:i}){return __awaiter(this,void 0,void 0,function*(){e?yield removePaths({paths:[e]}):r?yield removePaths({paths:r}):t&&(yield removeFolder$1({path:t,exclude:o,excludePattern:i}))})}!function(e){e.file="file",e.folder="folder",e.exclude="exclude",e.excludePattern="excludePattern",e.help="help"}(exports.CommandlineArg||(exports.CommandlineArg={})),function(e){e.f="f",e.d="d",e.e="e",e.p="p",e.h="h"}(exports.AbbreviatedCommandlineArg||(exports.AbbreviatedCommandlineArg={}));const ShortCommandlineArgs={[exports.CommandlineArg.file]:exports.AbbreviatedCommandlineArg.f,[exports.CommandlineArg.folder]:exports.AbbreviatedCommandlineArg.d,[exports.CommandlineArg.exclude]:exports.AbbreviatedCommandlineArg.e,[exports.CommandlineArg.excludePattern]:exports.AbbreviatedCommandlineArg.p,[exports.CommandlineArg.help]:exports.AbbreviatedCommandlineArg.h},CommandlineDescription={[exports.CommandlineArg.file]:"File to remove",[exports.CommandlineArg.folder]:"Folder to remove",[exports.CommandlineArg.exclude]:"File/Folder to exclude",[exports.CommandlineArg.excludePattern]:"File/Folder pattern to exclude",[exports.CommandlineArg.help]:"List help options"};exports.ShortCommandlineArgs=ShortCommandlineArgs,exports.CommandlineDescription=CommandlineDescription,exports.default=remove$1;
//# sourceMappingURL=index.js.map
