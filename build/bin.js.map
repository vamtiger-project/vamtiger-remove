{"version":3,"file":"bin.js","sources":["../source/remove-paths.ts","../source/index.ts","../source/bin.ts"],"sourcesContent":["import { RemoveFiles } from '.';\n\nconst remove = require('trash');\n\nexport default async function ({ paths }: RemoveFiles.Params) {\n    const result = paths && await remove(paths);\n\n    return result;\n}","import { promisify } from 'util';\nimport { unlink, rmdir, PathLike } from 'fs';\nimport { ClassifiedDirectoryContent } from 'vamtiger-get-directory-content-recursive/build/directory-content';\nimport remove from './remove';\n\nexport type DirectoryContent = {\n    [K in keyof ClassifiedDirectoryContent]?: ClassifiedDirectoryContent[K];\n};\n\nexport type DirectoryContentKey = keyof ClassifiedDirectoryContent;\n\nexport type CurrentDirectoryContent = ClassifiedDirectoryContent[DirectoryContentKey] | string[] | undefined;\n\nexport enum CommandlineArg {\n    file = 'file',\n    folder = 'folder',\n    exclude = 'exclude',\n    excludePattern = 'excludePattern',\n    help = 'help'\n}\n\nexport enum AbbreviatedCommandlineArg {\n    f = 'f',\n    d = 'd',\n    e = 'e',\n    p = 'p',\n    h = 'h'\n}\n\nexport const ShortCommandlineArgs = {\n    [CommandlineArg.file]: AbbreviatedCommandlineArg.f,\n    [CommandlineArg.folder]: AbbreviatedCommandlineArg.d,\n    [CommandlineArg.exclude]: AbbreviatedCommandlineArg.e,\n    [CommandlineArg.excludePattern]: AbbreviatedCommandlineArg.p,\n    [CommandlineArg.help]: AbbreviatedCommandlineArg.h\n}\n\nexport const CommandlineDescription = {\n    [CommandlineArg.file]: 'File to remove',\n    [CommandlineArg.folder]: 'Folder to remove',\n    [CommandlineArg.exclude]: 'File/Folder to exclude',\n    [CommandlineArg.excludePattern]: 'File/Folder pattern to exclude',\n    [CommandlineArg.help]: 'List help options'\n}\n\nexport namespace RemoveFile {\n    export type Params = {\n        path: PathLike;\n    }\n}\n\nexport namespace RemoveFiles {\n    export type Params = {\n        paths: Remove.Params['files'];\n    }\n}\n\nexport namespace RemoveFolder {\n    export type Params = {\n        path: string;\n        exclude: Remove.Params['exclude'];\n        excludePattern: Remove.Params['excludePattern'];\n    }\n}\n\nexport namespace GetFilePath {\n    export type Params = {\n        path: string;\n    }\n}\n\nexport namespace GetFolderContent {\n    export type Params = {\n        folderPath: RemoveFolder.Params['path'];\n        exclude?: string;\n        excludePattern?: string;\n    }\n}\n\nexport namespace Remove {\n    export type Params = {\n        file?: string;\n        folder?: string;\n        files?: string[];\n        recursive?: boolean;\n        exclude?: string | string[];\n        excludePattern?: string;\n    }\n}\n\nexport interface IGetTempFolder {\n    params: {\n        path: string;\n    }\n}\n\nexport interface IGetPathsToExclude {\n    params: {\n        paths: string[];\n        regex: RegExp[];\n    }\n}\n\nexport interface IArchivePaths {\n    params: {\n        paths: string[];\n        folderPath: string;\n        archiveFolder: string;\n    }\n}\n\nexport interface IArchivePath {\n    params: {\n        path: string;\n        folderPath: string;\n        archiveFolder: string;\n    }\n}\n\nexport interface IUnArchive {\n    params: {\n        archiveFolder: string;\n        unarchivedFolder: string;\n    }\n}\n\nexport interface IRemovePath {\n    params: {\n        path: string;\n    }\n}\n\nexport interface IRemoveFolderPath {\n    params: {\n        path: string;\n    }\n}\n\nexport default remove;","import { resolve as resolvePath, resolve } from 'path';\nimport Args from 'vamtiger-argv/build/main';\nimport getHelp from 'vamtiger-commandline-help';\nimport {\n    CommandlineArg,\n    ShortCommandlineArgs,\n    CommandlineDescription\n} from '.';\n\nconst remove = require('.').default;\nconst workingDirectory = process.cwd();\nconst args = new Args();\nconst currentFiles = (args.has(CommandlineArg.file) && args.getAll(CommandlineArg.file)\n    || args.has(ShortCommandlineArgs[CommandlineArg.file]) && args.getAll(ShortCommandlineArgs[CommandlineArg.file])) as string[];\nconst currrentFolder = (args.has(CommandlineArg.folder) && args.get(CommandlineArg.folder)\n    || args.has(ShortCommandlineArgs[CommandlineArg.folder]) && args.get(ShortCommandlineArgs[CommandlineArg.folder])) as string;\nconst currentExclude = (args.has(CommandlineArg.exclude) && args.getAll(CommandlineArg.exclude)\n    || args.has(ShortCommandlineArgs[CommandlineArg.exclude]) && args.getAll(ShortCommandlineArgs[CommandlineArg.exclude])) as string[];\nconst currrentFolderPattern = (args.has(CommandlineArg.excludePattern) && args.get(CommandlineArg.excludePattern)\n    || args.has(ShortCommandlineArgs[CommandlineArg.excludePattern]) && args.get(ShortCommandlineArgs[CommandlineArg.excludePattern])) as string;\nconst help = (args.has(CommandlineArg.help) || args.has(ShortCommandlineArgs[CommandlineArg.help])) && getHelp({\n    args: Object.assign(CommandlineArg),\n    short: ShortCommandlineArgs,\n    description: CommandlineDescription\n});\nconst removeParams = (currentFiles || currrentFolder) && {\n    files: currentFiles && currentFiles.map(file => resolvePath(workingDirectory, file)),\n    folder: resolvePath(workingDirectory, currrentFolder),\n    exclude: currentExclude,\n    excludePattern: currrentFolderPattern\n};\n\nif (help) {\n    console.log(help);\n} else if (removeParams) {\n    remove(removeParams)\n        .catch(handleError);\n}\n\nfunction handleError(error: Error) {\n    console.trace(error);\n    process.exit();\n}"],"names":["remove","require","CommandlineArg","AbbreviatedCommandlineArg","ShortCommandlineArgs","[object Object]","file","f","folder","d","exclude","e","excludePattern","p","help","h","CommandlineDescription","default","workingDirectory","process","cwd","args","Args","currentFiles","has","getAll","currrentFolder","get","currentExclude","currrentFolderPattern","getHelp","Object","assign","short","description","removeParams","files","map","resolvePath","handleError","error","console","trace","exit","log","catch"],"mappings":"qbAEA,MAAMA,OAASC,QAAQ,SCWvB,IAAYC,eAQAC,2BARZ,SAAYD,GACRA,cACAA,kBACAA,oBACAA,kCACAA,cALJ,CAAYA,iBAAAA,oBAQZ,SAAYC,GACRA,QACAA,QACAA,QACAA,QACAA,QALJ,CAAYA,4BAAAA,+BAQZ,MAAaC,sBACTC,CAACH,eAAeI,MAAOH,0BAA0BI,EACjDF,CAACH,eAAeM,QAASL,0BAA0BM,EACnDJ,CAACH,eAAeQ,SAAUP,0BAA0BQ,EACpDN,CAACH,eAAeU,gBAAiBT,0BAA0BU,EAC3DR,CAACH,eAAeY,MAAOX,0BAA0BY,GAGxCC,wBACTX,CAACH,eAAeI,MAAO,iBACvBD,CAACH,eAAeM,QAAS,mBACzBH,CAACH,eAAeQ,SAAU,yBAC1BL,CAACH,eAAeU,gBAAiB,iCACjCP,CAACH,eAAeY,MAAO,qBCjCrBd,SAASC,QAAQ,KAAKgB,QACtBC,iBAAmBC,QAAQC,MAC3BC,KAAO,IAAIC,KACXC,aAAgBF,KAAKG,IAAItB,eAAeI,OAASe,KAAKI,OAAOvB,eAAeI,OAC3Ee,KAAKG,IAAIpB,qBAAqBF,eAAeI,QAAUe,KAAKI,OAAOrB,qBAAqBF,eAAeI,OACxGoB,eAAkBL,KAAKG,IAAItB,eAAeM,SAAWa,KAAKM,IAAIzB,eAAeM,SAC5Ea,KAAKG,IAAIpB,qBAAqBF,eAAeM,UAAYa,KAAKM,IAAIvB,qBAAqBF,eAAeM,SACvGoB,eAAkBP,KAAKG,IAAItB,eAAeQ,UAAYW,KAAKI,OAAOvB,eAAeQ,UAChFW,KAAKG,IAAIpB,qBAAqBF,eAAeQ,WAAaW,KAAKI,OAAOrB,qBAAqBF,eAAeQ,UAC3GmB,sBAAyBR,KAAKG,IAAItB,eAAeU,iBAAmBS,KAAKM,IAAIzB,eAAeU,iBAC3FS,KAAKG,IAAIpB,qBAAqBF,eAAeU,kBAAoBS,KAAKM,IAAIvB,qBAAqBF,eAAeU,iBAC/GE,MAAQO,KAAKG,IAAItB,eAAeY,OAASO,KAAKG,IAAIpB,qBAAqBF,eAAeY,SAAWgB,SACnGT,KAAMU,OAAOC,OAAO9B,gBACpB+B,MAAO7B,qBACP8B,YAAalB,yBAEXmB,cAAgBZ,cAAgBG,kBAClCU,MAAOb,cAAgBA,aAAac,IAAI/B,GAAQgC,aAAYpB,iBAAkBZ,IAC9EE,OAAQ8B,aAAYpB,iBAAkBQ,gBACtChB,QAASkB,eACThB,eAAgBiB,uBAUpB,SAASU,YAAYC,GACjBC,QAAQC,MAAMF,GACdrB,QAAQwB,OATR7B,KACA2B,QAAQG,IAAI9B,MACLqB,cACPnC,SAAOmC,cACFU,MAAMN"}